const puppeteer = require('puppeteer');
var spawn = require('child_process').spawn

const BASE_URL = 'http://localhost:8085/';

function dataTestid(name) {
  return `[data-testid=${name}]`;
}

function wait(time) {
    const start = Date.now();
    while (true) {
      if (Date.now() - start >= time) {
        return true;
      }
    }
  }

describe('1 - Criar um servidor TCP utilizando o módulo net que exiba no console todo o conteúdo recebido', () => {
  let browser;
  let page;
  let client;

  beforeEach(async () => {
    client = spawn('node', ['exploiters/serverExploiter.js']);
    browser = await puppeteer.launch({ args: ['--no-sandbox', '--disable-gpu', '--disable-dev-shm-usage', '--window-size=1920,1080'], headless: true });
    page = await browser.newPage();
  });

  afterEach(async () => {
    client.stdout.on('close', ()=> { });
    client.stdout.on('exit', () => { });
    await browser.close();
  });

  it('Será validado que ao fazer a request e acessar o chrome irá mostrar os dados no console', async  (done) => {
    client.stdout.setEncoding('utf8');

    wait(2000);

    await page.goto(BASE_URL);

    await page.waitForSelector(dataTestid('server'));
    const textServer = await page.$$eval(dataTestid('server'), (nodes) => nodes.map((n) => n.innerText));

    expect(textServer).toContain('SERVER EXPLOITERS');

    client.stdout.on('data', function (data) {
      client.kill();
      expect(data).toContain('GET');
      expect(data).toContain('HTTP/1.1');
      expect(data).toContain('Host: localhost:8085');
      expect(data).toContain('User-Agent:');
      expect(data).toContain('Accept:');
      expect(data).toContain('Connection: keep-alive');
      done();
    });
  });
});
